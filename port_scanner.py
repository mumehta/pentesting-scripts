import socket
import os
from dotenv import load_dotenv
import re
import subprocess

load_dotenv()

METASPLOITABLE_HOST = os.getenv('METASPLOITABLE_IP', '192.168.0.6')

def grab_banner(host, port):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        sock.connect((host, port))
        sock.sendall(b"HEAD / HTTP/1.0\r\n\r\n")
        banner = sock.recv(1024).decode('utf-8', errors='ignore')
        sock.close()
        return banner.strip()
    except Exception as e:
        return None

def scan_ports(host, start_port, end_port):
    print(f"Scanning ports on {host} from {start_port} to {end_port}")
    
    for port in range(start_port, end_port + 1):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(0.1)
        result = sock.connect_ex((host, port))
        # is_port_open = True if result == 0 else False
        # print(f"Checking if Port {port} is open: {is_port_open}")

        if result == 0:
            print(f"Port {port} is open")
            banner = grab_banner(host, port)
            if banner:
                print(f"Banner for port {port}: {banner}")
                service_info = extract_service_info(banner)
                if service_info:
                    print(f"Service detected: {service_info}")
                    search_vulnerability(service_info)
            else:
                print(f"Could not grab banner for port {port}")
        sock.close()

def extract_service_info(banner):
    # Simple example to extract service name/version (this can be extended with more regex)
    service_regex = re.compile(r"Server: ([\w\s/\.]+)")
    match = service_regex.search(banner)
    if match:
        return match.group(1)
    return None

def search_vulnerability(service_info):
    # Use msfconsole to search for vulnerabilities using Metasploit's `search` command
    try:
        print(f"Searching for vulnerabilities for {service_info} using Metasploit...")
        # Running msfconsole search
        result = subprocess.run(['msfconsole', '-q', '-x', f'search {service_info}; exit'],
                                stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output = result.stdout.decode('utf-8')
        if 'No results' not in output:
            print("Vulnerabilities found:")
            print(output)
        else:
            print("No vulnerabilities found for this service.")
    except Exception as e:
        print(f"Failed to search vulnerabilities: {e}")

if __name__ == "__main__":
    host = METASPLOITABLE_HOST
    start_port = 1
    end_port = 1000  # Limiting the range for faster testing
    scan_ports(host, start_port, end_port)
