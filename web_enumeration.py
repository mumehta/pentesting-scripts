import socket
import subprocess
import requests
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Get the Metasploitable IP from the .env file
METASPLOITABLE_HOST = os.getenv('METASPLOITABLE_IP', '192.168.0.6')

# Function to scan for open ports
def scan_ports(host, start_port, end_port):
    """Scan the ports from start_port to end_port on the host."""
    open_ports = []
    for port in range(start_port, end_port + 1):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)  # Timeout of 1 second
        result = sock.connect_ex((host, port))
        if result == 0:
            print(f"Port {port} is open on {host}")
            open_ports.append(port)
        sock.close()
    return open_ports

# Function to run gobuster or dirb for directory enumeration
def run_gobuster(host):
    """Run gobuster to find hidden directories and files on the target host."""
    wordlist = "/usr/share/wordlists/dirb/common.txt"  # Path to wordlist file
    print(f"Running gobuster on {host}...")

    try:
        # Run gobuster to enumerate directories
        result = subprocess.run(['gobuster', 'dir', '-u', f'http://{host}', '-w', wordlist],
                                stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode == 0:
            print("Gobuster scan results:\n")
            print(result.stdout)
        else:
            print(f"Gobuster failed: {result.stderr}")
    except FileNotFoundError:
        print("Gobuster not found. Ensure gobuster is installed or replace it with dirb.")
    except Exception as e:
        print(f"Error running gobuster: {e}")

# Function to retrieve and print robots.txt
def get_robots_txt(host):
    """Retrieve and print the robots.txt file from the target host."""
    url = f"http://{host}/robots.txt"
    try:
        print(f"Fetching robots.txt from {url}")
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            print("robots.txt found:\n")
            print(response.text)
        else:
            print("No robots.txt file found.")
    except requests.RequestException as err:
        print(f"Error retrieving robots.txt: {err}")

# Main function
if __name__ == "__main__":
    target_host = METASPLOITABLE_HOST
    print(f"Starting scan on {target_host}")

    # Scan ports (for example, from 1 to 1000)
    open_ports = scan_ports(target_host, 1, 1000)

    # Check if port 80 is open and perform web enumeration
    if 80 in open_ports:
        print("Port 80 is open. Proceeding with directory enumeration and robots.txt retrieval...")
        get_robots_txt(target_host)  # Try to get robots.txt
        run_gobuster(target_host)    # Run gobuster or dirb for hidden directories
    else:
        print("Port 80 is not open. Web enumeration skipped.")
