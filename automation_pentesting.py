import socket
import os
from dotenv import load_dotenv
import re
import subprocess
from scapy.all import ARP, Ether, srp  # Make sure scapy is installed

# Load environment variables
load_dotenv()

# Load IP range and Metasploitable host
METASPLOITABLE_HOST = os.getenv('METASPLOITABLE_IP', '192.168.0.6')
IP_RANGE = os.getenv('IP_RANGE', '192.168.0.0/24')

def grab_banner(host, port):
    """Attempts to grab a banner from the open port to identify the service."""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        sock.connect((host, port))
        sock.sendall(b"HEAD / HTTP/1.0\r\n\r\n")
        banner = sock.recv(1024).decode('utf-8', errors='ignore')
        sock.close()
        return banner.strip()
    except Exception as e:
        return None

def scan_ports(host, start_port, end_port):
    """Scans the open ports of the provided host."""
    print(f"Scanning ports on {host} from {start_port} to {end_port}")
    
    for port in range(start_port, end_port + 1):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(0.1)
        result = sock.connect_ex((host, port))

        if result == 0:
            print(f"Port {port} is open")
            banner = grab_banner(host, port)
            if banner:
                print(f"Banner for port {port}: {banner}")
                service_info = extract_service_info(banner)
                if service_info:
                    print(f"Service detected: {service_info}")
                    search_vulnerability(service_info)
            else:
                print(f"Could not grab banner for port {port}")
        sock.close()

def extract_service_info(banner):
    """Extracts service information from a banner."""
    service_regex = re.compile(r"Server: ([\w\s/\.]+)")
    match = service_regex.search(banner)
    if match:
        return match.group(1)
    return None

def search_vulnerability(service_info):
    """Searches Metasploit for vulnerabilities related to the detected service."""
    try:
        print(f"Searching for vulnerabilities for {service_info} using Metasploit...")
        result = subprocess.run(['msfconsole', '-q', '-x', f'search {service_info}; exit'],
                                stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output = result.stdout.decode('utf-8')
        if 'No results' not in output:
            print("Vulnerabilities found:")
            print(output)
        else:
            print("No vulnerabilities found for this service.")
    except Exception as e:
        print(f"Failed to search vulnerabilities: {e}")

def scan_network(ip_range):
    """Scans the local network to discover active devices."""
    print(f"Scanning network range: {ip_range}")
    arp = ARP(pdst=ip_range)
    ether = Ether(dst="ff:ff:ff:ff:ff:ff")
    packet = ether/arp

    result = srp(packet, timeout=2, verbose=0)[0]

    devices = []
    for sent, received in result:
        devices.append({'ip': received.psrc, 'mac': received.hwsrc})

    return devices

def find_metasploitable_device(devices, metasploitable_ip):
    """Finds the Metasploitable device by its IP address in the list of scanned devices."""
    for device in devices:
        if device['ip'] == metasploitable_ip:
            return device
    return None

if __name__ == "__main__":
    # Scan the network
    devices = scan_network(IP_RANGE)
    
    # Display found devices
    print("Devices found on the network:")
    for device in devices:
        print(f"IP: {device['ip']}, MAC: {device['mac']}")

    # Look for the Metasploitable device
    metasploitable_device = find_metasploitable_device(devices, METASPLOITABLE_HOST)
    
    if metasploitable_device:
        print(f"Metasploitable device found: {metasploitable_device['ip']}")
        # Perform port scan on the Metasploitable device
        scan_ports(METASPLOITABLE_HOST, 1, 1000)  # Limiting to ports 1-1000 for faster testing
    else:
        print(f"Metasploitable device not found in the network range {IP_RANGE}.")
